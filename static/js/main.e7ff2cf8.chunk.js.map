{"version":3,"sources":["Components/MainContent/GuestList/GuestName.js","Components/MainContent/GuestList/Guest.js","Components/MainContent/GuestList/PendingGuest.js","Components/MainContent/GuestList/GuestList.js","Components/MainContent/Counter.js","Components/Header/Header.js","Components/MainContent/ConfirmedFilter.js","App.js","serviceWorker.js","index.js"],"names":["GuestName","props","isEditing","react_default","a","createElement","type","name","value","children","onChange","handleNameEdits","Guest","_ref","guest","onConfirm","onEditToggle","setName","removeGuest","className","isConfirmed","GuestList_GuestName","e","target","checked","onClick","PendingGuest","pendingGuestName","GuestList","guests","setNameAt","isFiltered","removeGuestAt","GuestList_PendingGuest","filter","map","index","GuestList_Guest","key","id","toString","text","Counter","attending","unconfirmed","total","Header","addGuest","pendingGuest","handlingNameInput","onSubmit","placeholder","ConfirmedFilter","toggleFilter","App","state","_this","setState","prevState","ev","preventDefault","maxId","Math","max","apply","Object","toConsumableArray","g","concat","toggleGuestPropertyAt","property","objectSpread","defineProperty","onConfirmToggle","getTotalInvited","length","getTotalConfirmed","this","totalGuests","Components_Header_Header","MainContent_ConfirmedFilter","MainContent_Counter","MainContent_GuestList_GuestList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7ff2cf8.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nconst GuestName = (props) => {\r\n    if (props.isEditing) {\r\n        return (\r\n            <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={props.children}\r\n                onChange={props.handleNameEdits} />\r\n        )\r\n    }\r\n    return (\r\n        <span>\r\n            {props.children}\r\n        </span>\r\n    );\r\n}\r\n\r\nGuestName.propTypes = {\r\n    isEditing: propTypes.bool.isRequired,\r\n    handleNameEdits: propTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default GuestName;","import React from \"react\";\r\nimport propTypes from 'prop-types';\r\nimport GuestName from './GuestName';\r\n\r\nconst Guest = ({ guest, onConfirm, onEditToggle, isEditing, setName, removeGuest }) => {\r\n\r\n    return (\r\n        <li className={guest.isConfirmed ? \"responded\" : \"\"} >\r\n            <GuestName\r\n                isEditing={isEditing}\r\n                handleNameEdits={(e) => setName(e.target.value)}>\r\n                {guest.name}\r\n            </GuestName>\r\n            <label>\r\n                <input type=\"checkbox\" checked={guest.isConfirmed} onChange={onConfirm} /> Confirmed\r\n            </label>\r\n            <button onClick={onEditToggle}>{guest.isEditing ? 'save' : 'edit'}</button>\r\n            <button onClick={removeGuest}>remove</button>\r\n        </li>\r\n    )\r\n};\r\n\r\nGuest.propTypes = {\r\n    guest: propTypes.object.isRequired,\r\n    onConfirm: propTypes.func.isRequired,\r\n    onEditToggle: propTypes.func.isRequired,\r\n    isEditing: propTypes.bool.isRequired,\r\n    setName: propTypes.func.isRequired,\r\n    removeGuest: propTypes.func.isRequired,\r\n}\r\n\r\nexport default Guest;\r\n","import React from \"react\";\r\nimport propTypes from 'prop-types';\r\n\r\nconst PendingGuest = ({ pendingGuestName}) => {\r\n\r\n    return (\r\n\r\n        <li className=\"pending\">\r\n            <span>{pendingGuestName}</span>\r\n        </li>\r\n\r\n    )\r\n};\r\n\r\nPendingGuest.propTypes = {\r\n    pendingGuestName: propTypes.string.isRequired,\r\n}\r\n\r\nexport default PendingGuest;\r\n","import React from \"react\";\r\nimport propTypes from 'prop-types';\r\nimport Guest from './Guest';\r\nimport PendingGuest from './PendingGuest';\r\n\r\nconst GuestList = ({ guests, onConfirm, onEditToggle, setNameAt, isFiltered, removeGuestAt, pendingGuestName }) => {\r\n\r\n  return (\r\n    <ul>\r\n      {pendingGuestName ?\r\n        <PendingGuest pendingGuestName={pendingGuestName} />\r\n        : null }\r\n      {guests\r\n        .filter(guest => isFiltered ? guest.isConfirmed : true)\r\n        .map((guest, index) => (\r\n          <Guest key={guest.id.toString()}\r\n            guest={guest}\r\n            isEditing={guest.isEditing}\r\n            onConfirm={() => onConfirm(guest.id)}\r\n            onEditToggle={() => onEditToggle(guest.id)}\r\n            setName={(text) => setNameAt(text, guest.id)}\r\n            removeGuest={() => removeGuestAt(guest.id)}\r\n          />\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nGuestList.propTypes = {\r\n  guests: propTypes.array.isRequired,\r\n  onConfirm: propTypes.func.isRequired,\r\n  onEditToggle: propTypes.func.isRequired,\r\n  setNameAt: propTypes.func.isRequired,\r\n  isFiltered: propTypes.bool.isRequired,\r\n  removeGuestAt: propTypes.func.isRequired,\r\n  pendingGuestName: propTypes.string.isRequired,\r\n}\r\n\r\nexport default GuestList;\r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nconst Counter = ({ attending, unconfirmed, total }) => {\r\n\r\n    return (\r\n        <table className=\"counter\">\r\n            <tbody>\r\n                <tr>\r\n                    <td>Attending:</td>\r\n                    <td>{attending}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Unconfirmed:</td>\r\n                    <td>{unconfirmed}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Total:</td>\r\n                    <td>{total}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n\r\n}\r\n\r\nCounter.propTypes = { \r\n    attending: propTypes.number.isRequired,\r\n    unconfirmed: propTypes.number.isRequired,\r\n    total: propTypes.number.isRequired,\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nconst Header = ({ addGuest, pendingGuest, handlingNameInput }) => {\r\n\r\n    return (\r\n        <header>\r\n            <h1>RSVP App</h1>\r\n            <form onSubmit={addGuest}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Invite Someone\"\r\n                    value={pendingGuest}\r\n                    onChange={handlingNameInput}\r\n                />\r\n                <button\r\n                    type=\"submit\"\r\n                    name=\"submit\"\r\n                    value=\"submit\">Submit\r\n            </button>\r\n            </form>\r\n        </header >)\r\n}\r\n\r\nHeader.propTypes = {\r\n    addGuest: propTypes.func.isRequired,\r\n    pendingGuest: propTypes.string.isRequired,\r\n    handlingNameInput: propTypes.func.isRequired,\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport propTypes from 'prop-types';\r\n\r\nconst ConfirmedFilter = ({ isFiltered, toggleFilter }) => {\r\n  return (\r\n    <div>\r\n      <h2>Invitees</h2>\r\n      <label>\r\n        <input type=\"checkbox\" onChange={toggleFilter} checked={isFiltered} />\r\n        Hide those who haven't responded\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nConfirmedFilter.propTypes={\r\n    isFiltered: propTypes.bool.isRequired,\r\n    toggleFilter: propTypes.func.isRequired,\r\n}\r\n\r\nexport default ConfirmedFilter;\r\n","import React, { Component } from \"react\";\r\nimport GuestList from \"./Components/MainContent/GuestList/GuestList\";\r\nimport Counter from \"./Components/MainContent/Counter\";\r\nimport Header from \"./Components/Header/Header\";\r\nimport ConfirmedFilter from \"./Components/MainContent/ConfirmedFilter\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isFiltered: false,\r\n    pendingGuest: \"\",\r\n    guests: [\r\n      { name: \"Alex\", isConfirmed: true, isEditing: false, id: 1 },\r\n      { name: \"Bogdan\", isConfirmed: false, isEditing: false, id: 2 },\r\n      { name: \"Ciprian\", isConfirmed: false, isEditing: false, id: 3 }\r\n    ]\r\n  };\r\n\r\n  /** HEADER METHODS */\r\n\r\n  /**\r\n   * Handles the filtering of confirmed guests\r\n   */\r\n  toggleFilter = () => {\r\n    this.setState(prevState => ({ isFiltered: !prevState.isFiltered }));\r\n  };\r\n\r\n  /**\r\n   * Handles the Add New Guest input field\r\n   */\r\n  handlingNameInput = ev => {\r\n    this.setState({ pendingGuest: ev.target.value });\r\n  };\r\n\r\n  /**\r\n   * Handles the adding of a new guest\r\n   */\r\n  addGuest = ev => {\r\n    ev.preventDefault();\r\n    this.setState(prevState => {\r\n      const maxId = Math.max(...prevState.guests.map(g => g.id));\r\n      return {\r\n        guests: [\r\n          {\r\n            name: prevState.pendingGuest,\r\n            isConfirmed: false,\r\n            isEditing: false,\r\n            id: maxId + 1\r\n          },\r\n          ...prevState.guests\r\n        ],\r\n        pendingGuest: \"\"\r\n      };\r\n    });\r\n  };\r\n\r\n  /** GUEST LIST METHODS */\r\n\r\n  /**\r\n   * Generic method to change any property from a specific guest\r\n   */\r\n  toggleGuestPropertyAt = (property, id) => {\r\n    this.setState(prevState => {\r\n      return {\r\n        guests: prevState.guests.map(g =>\r\n          g.id === id ? { ...g, [property]: !g[property] } : g\r\n        )\r\n      };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Handles the click on the \"Confirmed\" checkbox\r\n   */\r\n  onConfirmToggle = id => {\r\n    this.toggleGuestPropertyAt(\"isConfirmed\", id);\r\n  };\r\n\r\n  /**\r\n   * Controls the edited text from the guest name's field\r\n   */\r\n  setNameAt = (text, id) => {\r\n    this.setState(prevState => ({\r\n      guests: prevState.guests.map(g => g.id === id ? { ...g, name: text } : g )\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * Handles the \"Edit/Save\" action\r\n   */\r\n  onEditToggle = id => {\r\n    this.toggleGuestPropertyAt(\"isEditing\", id);\r\n  };\r\n\r\n  removeGuestAt = id => {\r\n    this.setState(prevState => ({\r\n      guests: prevState.guests.filter(g => g.id !== id)\r\n    }));\r\n  };\r\n\r\n  /** COUNTER METHODS */\r\n\r\n  getTotalInvited = () => this.state.guests.length;\r\n\r\n  getTotalConfirmed = () =>\r\n    this.state.guests.filter(guest => guest.isConfirmed).length;\r\n\r\n  render() {\r\n    const attending = this.getTotalConfirmed();\r\n    const totalGuests = this.getTotalInvited();\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Header\r\n          addGuest={this.addGuest}\r\n          pendingGuest={this.state.pendingGuest}\r\n          handlingNameInput={this.handlingNameInput}\r\n        />\r\n        <div className=\"main\">\r\n          <ConfirmedFilter\r\n            toggleFilter={this.toggleFilter}\r\n            isFiltered={this.state.isFiltered}\r\n          />\r\n          <Counter\r\n            attending={attending}\r\n            unconfirmed={totalGuests - attending}\r\n            total={totalGuests}\r\n          />\r\n\r\n          <GuestList\r\n            guests={this.state.guests}\r\n            onConfirm={this.onConfirmToggle}\r\n            onEditToggle={this.onEditToggle}\r\n            setNameAt={this.setNameAt}\r\n            isFiltered={this.state.isFiltered}\r\n            removeGuestAt={this.removeGuestAt}\r\n            pendingGuestName={this.state.pendingGuest}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}